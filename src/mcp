#!/usr/bin/php
<?
include "conf.php";
include "inc/hooks.php";
register_hook("debug", "mcp_debug");
function mcp_debug($text, $category) {
  global $debug_list;

  print Date("Y-m-d H:i:s")." $category $text\n";

  $debug_list=array();
}

include "inc/plugins.php";
include "inc/lock.php";
include "inc/number.php";
include "inc/tags.php";
include "inc/sql.php";
include "inc/debug.php";
include "inc/category.php";
include "inc/categories.php";
include "inc/process_category.php";
include "inc/functions.php";
include "inc/dom.php";
include "inc/css.php";
include "inc/postgis.php";
include "inc/git_obj.php";
include "inc/data_dir.php";
include "gen_renderd_conf.php";
$plugins[]="icon";
plugins_init("mcp");
call_hooks("mcp_start");

function restart_renderd() {
  global $apache2_reload_cmd;
  global $root_path;

  system("killall renderd");
  gen_renderd_conf();
  chdir($root_path);
  if(!$apache2_reload_cmd)
    $apache2_reload_cmd="sudo /etc/init.d/apache2 reload";
  system($apache2_reload_cmd);
  system("software/mod_tile/renderd");
}
register_hook("postgresql_restart_done", "restart_renderd");

function compile($cat_id) {
  $x=new category($cat_id);
  $x->compile();
  restart_renderd();
}

function mcp_process($todo) {
  $todo=explode(" ", $todo);

  switch($todo[0]) {
    case "restart":
      restart_renderd();
      break;
    case "compile":
      compile($todo[1]);
      break;
    default:
      print "didn't understand ".implode(" ", $todo)."\n";
  }
  return 1;
}

declare(ticks=1);
function mcp_sig_handler($signo) {
  global $fifo;
  global $fifo_path;

  switch($signo) {
    case SIGTERM:
    case SIGINT:
      print "exiting\n";
      fclose($fifo);
      unlink($fifo_path);
      exit;
  }
}

umask(0);
posix_mkfifo($fifo_path, 0666);
$fifo=fopen($fifo_path, "r+");

$tmp_dir="$root_path/tmp/".Date("Ymd-Hi");
print "Creating temporary directory $tmp_dir\n";
mkdir($tmp_dir);

pcntl_signal(SIGTERM, "mcp_sig_handler");
pcntl_signal(SIGINT,  "mcp_sig_handler");

restart_renderd();
$mcp_next_clean_up=time()+15*60;

while(1) {
  call_hooks("mcp_tick", null);

  if($mcp_next_clean_up<=time()) {
    $mcp_next_clean_up=time()+60*60;
    call_hooks("mcp_clean_up", null);
    if(isset($db_central['master'])&&($db_central['master']))
      call_hooks("mcp_clean_up_master", null);
  }

  $stream_read=array($fifo);
  $stream_write=array();
  $stream_except=array();
  stream_select($stream_read, $stream_write, $stream_except, 10);

  foreach($stream_read as $str) {
    if($str==$fifo) {
      $todo=trim(fgets($fifo));
      mcp_process($todo);
    }
  }
}
