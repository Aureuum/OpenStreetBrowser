#!/bin/bash

# This script is used to generate a test rendering
# Only a single database is used

killall generate_tiles.py
sleep 1

export ROOT_PATH=/osm/skunkosm
export SOFTWARE_PATH=/osm/osm/software
export DB_NAME=skunk

echo "* Delete old tiles"
rm -r $ROOT_PATH/data/tiles/*

echo "* Download new OSM-File"
cd $ROOT_PATH/data
wget -N http://download.geofabrik.de/osm/europe/austria.osm.bz2
wget -N http://download.geofabrik.de/osm/europe/bulgaria.osm.bz2

echo "* Importing to Database"
psql -d gis -c "drop database $DB_NAME"
psql -d gis -c "create database $DB_NAME"
psql -d $DB_NAME -c "create language plpgsql"
psql -d $DB_NAME -f /usr/share/postgresql/8.4/contrib/postgis.sql
psql -d $DB_NAME -f /usr/share/postgresql/8.4/contrib/_int.sql
psql -d $DB_NAME -f /usr/share/postgresql/8.4/contrib/hstore.sql
psql -d $DB_NAME -f /usr/share/postgresql/8.4/contrib/spatial_ref_sys.sql
psql -d $DB_NAME -f /usr/share/postgresql/8.4/contrib/btree_gist.sql

echo "= osmosis"
echo "- init db for osmosis"
psql $DB_NAME < $ROOT_PATH/src/pgsql_simple_schema.sql
cd $ROOT_PATH/data/
osmosis --read-xml $ROOT_PATH/data/austria.osm.bz2 --write-pgsql-dump
cd pgimport
echo "- load db from osmosis"
psql $DB_NAME < $ROOT_PATH/src/pgsql_simple_load.sql

cd $ROOT_PATH/data/
osmosis --read-xml $ROOT_PATH/data/bulgaria.osm.bz2 --write-pgsql-dump
cd pgimport
echo "- load db from osmosis"
psql $DB_NAME < $ROOT_PATH/src/pgsql_simple_load.sql

echo "* Preprocessing data"
cd $ROOT_PATH
for i in src/sql/*.sql ; do echo "Processing $i ..." ; psql $DB_NAME < $i ; done

echo "List"
php $ROOT_PATH/src/wiki_data_conf.php
php src/wiki_create_indexes.php | psql $DB_NAME

echo "* Update style-sheet"
export TMPDIR="/osm/`whoami`-style/`date +%Y%m%d-%H%M`"
mkdir -p $TMPDIR
echo "WIKI Style"
cd $ROOT_PATH
$ROOT_PATH/src/gen_mss_from_wiki.php
echo "BASE"
echo "Layers"
cd $ROOT_PATH/render
./gen_rotate_img.php
./gen_layer.php > base.mml
cascadenik-compile.py $ROOT_PATH/render/base.mml > $ROOT_PATH/render/base.xml
$ROOT_PATH/src/update_xml $ROOT_PATH/render/base.xml
echo "PT"
cd $ROOT_PATH/render/img/rotate/src
for i in *.svg ; do convert -background none $i ../`echo $i | sed "s/svg$/png/"` ; done
cd $ROOT_PATH/render
cascadenik-compile.py $ROOT_PATH/render/overlay_pt.mml > $ROOT_PATH/render/overlay_pt.xml
$ROOT_PATH/src/update_xml $ROOT_PATH/render/overlay_pt.xml
./create_rotate_style
echo "CH"
cascadenik-compile.py $ROOT_PATH/render/overlay_ch.mml > $ROOT_PATH/render/overlay_ch.xml
$ROOT_PATH/src/update_xml $ROOT_PATH/render/overlay_ch.xml
echo "CAR"
render/gen_mml.php $ROOT_PATH/render/overlay_car > $ROOT_PATH/render/overlay_car_compiled.mml
cascadenik-compile.py $ROOT_PATH/render/overlay_car_compiled.mml > $ROOT_PATH/render/overlay_car.xml
$ROOT_PATH/src/update_xml $ROOT_PATH/render/overlay_car.xml

cd $ROOT_PATH
echo "Other"
cp $ROOT_PATH/render/overlay_services.template $ROOT_PATH/render/overlay_services.xml
$ROOT_PATH/src/update_xml $ROOT_PATH/render/overlay_services.xml

cp $ROOT_PATH/render/overlay_culture.template $ROOT_PATH/render/overlay_culture.xml
$ROOT_PATH/src/update_xml $ROOT_PATH/render/overlay_culture.xml

cp $ROOT_PATH/render/overlay_food.template $ROOT_PATH/render/overlay_food.xml
$ROOT_PATH/src/update_xml $ROOT_PATH/render/overlay_food.xml

cp $ROOT_PATH/render/shop.template $ROOT_PATH/render/shop.xml
$ROOT_PATH/src/update_xml $ROOT_PATH/render/shop.xml

cp $ROOT_PATH/render/agri_ind.template $ROOT_PATH/render/agri_ind.xml
$ROOT_PATH/src/update_xml $ROOT_PATH/render/agri_ind.xml
sleep 2

echo "* Finished"
cd $ROOT_PATH
./src/mcp
