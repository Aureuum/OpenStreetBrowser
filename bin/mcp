#!/usr/bin/php
<?
include_once "inc/cli.php";
include "$root_path/conf.php";
include "inc/hooks.php";
register_hook("debug", "mcp_debug");

if(!isset($mcp_debug_level))
  $mcp_debug_level=2;
function mcp_debug($entry) {
  global $debug_list;
  global $debug_levels_abbr;
  global $mcp_debug_level;

  if($entry['level']>=$mcp_debug_level)
    fprintf(STDERR, "%s (%s) %s %s\n",
      Date("Y-m-d H:i:s", $entry['time']),
      $debug_levels_abbr[$entry['level']],
      $entry['category'],
      $entry['text']
    );

  $debug_list=array();
}

include "inc/plugins.php";
include "inc/lock.php";
include "inc/number.php";
include "inc/tags.php";
include "inc/sql.php";
include "inc/debug.php";
include "inc/category.php";
include "inc/categories.php";
include "inc/process_category.php";
include "inc/functions.php";
include "inc/dom.php";
include "inc/css.php";
include "inc/postgis.php";
include "inc/git_obj.php";
include "inc/data_dir.php";
$plugins[]="icon";
plugins_init("mcp");
debug("* MCP all plugins loaded, initializing", "mcp");

define("MCP_READ",   0);
define("MCP_WRITE",  1);
define("MCP_EXCEPT", 2);
$streams=array(MCP_READ=>array(), MCP_WRITE=>array(), MCP_EXCEPT=>array());
$streams_callback=array(MCP_READ=>array(), MCP_WRITE=>array(), MCP_EXCEPT=>array());

// create temporary directory
$tmp_dir="$root_path/tmp/".Date("Ymd-Hi");
debug("Creating temporary directory $tmp_dir", "mcp");
mkdir($tmp_dir);

// initialize plugins
call_hooks("mcp_start");

function compile($cat_id) {
  $x=new category($cat_id);
  $x->compile();
  restart_renderd();
}

function quit() {
  debug("* MCP got termination signal, stopping", "mcp");

  call_hooks("mcp_stop");

  exit(0);
}

declare(ticks=1);
function mcp_sig_handler($signo) {
  switch($signo) {
    case SIGUSR1:
      call_hooks("mcp_sigusr1");
      break;
    case SIGUSR2:
      call_hooks("mcp_sigusr2");
      break;
    case SIGTERM:
    case SIGINT:
      quit();
  }
}

pcntl_signal(SIGTERM, "mcp_sig_handler");
pcntl_signal(SIGINT,  "mcp_sig_handler");
pcntl_signal(SIGUSR1, "mcp_sig_handler");
pcntl_signal(SIGUSR2, "mcp_sig_handler");

$mcp_next_clean_up=time()+15*60;
debug("* MCP up and running", "mcp");

// Example:
// $p=fopen("/dev/zero", "r");
// mcp_register_stream(MCP_READ, $p, "test");
// Function "test" will be called everytime data is available on /dev/zero
// Function "test" will be passed the current $stream
function mcp_register_stream($type, $stream, $callback) {
  global $streams;
  global $streams_callback;

  if(($type<0)||($type>2)) {
    debug("mcp_register_stream: invalid type $type", "mcp");
    return;
  }

  $streams[$type][]=$stream;
  $streams_callback[$type][]=array($stream, $callback);
}

function mcp_unregister_stream($type, $stream) {
  global $streams;
  global $streams_callback;

  if(($type<0)||($type>2)) {
    debug("mcp_unregister_stream: invalid type $type", "mcp");
    return;
  }

  $pos=array_search($stream, $streams[$type]);
  if($pos===false) {
    debug("mcp_unregister_stream: could not find stream '$stream'", "mcp");
    return;
  }

  unset($streams[$type][$pos]);
  unset($streams_callback[$type][$pos]);
  debug("mcp_unregister_stream: unregistered $type:$pos", "mcp");
}

function mcp_command($p) {
  $str=trim(fgets($p));

  switch($str) {
    case "stop":
    case "quit":
      quit();
      break;
    default:
      call_hooks("mcp_command", $str);
  }
}

mcp_register_stream(MCP_READ, STDIN, "mcp_command");

while(1) {
  call_hooks("mcp_tick", null);

  if($mcp_next_clean_up<=time()) {
    $mcp_next_clean_up=time()+60*60;
    call_hooks("mcp_clean_up", null);
    if(isset($db_central['master'])&&($db_central['master']))
      call_hooks("mcp_clean_up_master", null);
  }

  unset($_streams);
  array_deep_copy($streams, $_streams);
  stream_select(&$_streams[MCP_READ], &$_streams[MCP_WRITE], &$_streams[MCP_EXCEPT], 10);

  foreach($_streams as $type=>$type_streams) {
    foreach($type_streams as $str) {
      if(($pos=array_search($str, $streams[$type]))!==false) {
        $fun=$streams_callback[$type][$pos][1];
        $fun($str);
      }
    }
  }
}
